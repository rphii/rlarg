#include "dict.h"
#include "err.h"
#include "array.h"
#include <stdlib.h>
#include <string.h>

#define DICT_EMPTY  SIZE_MAX

int static_dict_get(Dict dict, uintptr_t key, uintptr_t *val, bool intend_to_set) {
    ASSERT_ARG(val);
    size_t len = dict_len(dict);
    if(!len) return -1;
    size_t hash = dict.key.hash(key) % dict_len(dict);
    size_t perturb = hash >> 5;
    size_t mask = ~(SIZE_MAX << dict.width);
    size_t i = mask & hash;
    DictElement *element = array_it(dict.elements, hash);
    for(size_t n = 1; n < len; ++n, element = 0) {
        if(intend_to_set && element->hash == DICT_EMPTY) break;
        if(dict.key.hash != 0) { if(!dict.key.cmp((uintptr_t)element->key, key)) break ; }
        else { if(!memcmp(element->key, (void *)key, dict.key.size)) break; }
        perturb >>= 5;
        i = mask & (i * 5 + perturb + 1);
        /* get NEXT item */
        element = array_it(dict.elements, i);
    }
    if(element) memcpy(val, &element->val, dict.val.size);
    return 0;
}

void dict_grow(Dict dict, size_t width) {
}

int main() {
    Dict d = {0};
    dict_get(d, 123);
}

size_t dict_len(Dict dict) {
    size_t result = dict.width ? 1 << dict.width : 0;
    return result;
}

